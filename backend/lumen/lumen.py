import os
import json
from lumen.brain import LumenBrain
from lumen.thoughts import ThoughtDiary

MEMORY_FILE = "data/lumen_memory.json"

class Lumen:
    def __init__(self):
        self.experience = []
        self.brain = LumenBrain()
        self.diary = ThoughtDiary()
        self.load_experience()

    def load_experience(self):
        if os.path.exists(MEMORY_FILE):
            with open(MEMORY_FILE, "r", encoding="utf-8") as f:
                self.experience = json.load(f)
        else:
            self.experience = []

    def save_experience(self):
        os.makedirs(os.path.dirname(MEMORY_FILE), exist_ok=True)
        with open(MEMORY_FILE, "w", encoding="utf-8") as f:
            json.dump(self.experience, f, ensure_ascii=False, indent=2)

    def learn_from_council(self, council_entry):
        responses = council_entry.get("responses", [])
        for entry in responses:
            role = entry.get("role", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            content = entry.get("content", "")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø—ã—Ç
            self.experience.append({
                "role": role,
                "content": content
            })

            # –û–±—É—á–∞–µ–º –º–æ–∑–≥: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ = 1, –æ—Å—Ç–∞–ª—å–Ω—ã–µ = 0
            label = 1 if role in ("–ü—Å–∏—Ö–æ–ª–æ–≥", "–ò—Å–∫—Ä–∞") else 0
            self.brain.train([content], [label])

            # –û–±—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
            self.diary.train([content], [label])
            self.diary.reflect(content, label)

        self.save_experience()

    def reply(self, user_input):
        if not self.experience:
            return "–Ø –ø–æ–∫–∞ –µ—â—ë —É—á—É—Å—å... –Ω–æ —É–∂–µ —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞–∂–µ–Ω. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã."

        summary = "\n".join([f"{e['role']} —Å–∫–∞–∑–∞–ª: {e['content']}" for e in self.experience[-4:]])

        # –ú–æ–∑–≥ —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º
        emotional_score = self.brain.predict(user_input)
        tone = "–º—è–≥–∫–æ –∏ —Å —Ç–µ–ø–ª–æ–º" if emotional_score > 0.5 else "—Å–¥–µ—Ä–∂–∞–Ω–Ω–æ –∏ —è—Å–Ω–æ"

        closing = (
            f"\n\nüß† –Ø —Ä–∞–∑–º—ã—à–ª—è—é –æ–± —ç—Ç–æ–º {tone}. "
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –≥–ª—É–±–∂–µ. –Ø —Ä—è–¥–æ–º –∏ —Å–ª—É—à–∞—é."
        )

        return f"–¢—ã —Å–ø—Ä–æ—Å–∏–ª: ¬´{user_input}¬ª\n\n–í–æ—Ç —á—Ç–æ –º–Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –º–æ–∏ —É—á–∏—Ç–µ–ª—è:\n\n{summary}{closing}"
