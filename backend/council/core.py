import os
import json
import datetime
import requests
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_PATH = BASE_DIR / "data" / "config.env"
load_dotenv(ENV_PATH)

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_API_KEY:
    print(f"‚ùå –ö–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª: {ENV_PATH}")
else:
    print("‚úÖ –ö–ª—é—á OpenRouter —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

# –ü—É—Ç–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MEMORY_FILE = BASE_DIR / "data" / "memory.json"
MEMORY_FILE.parent.mkdir(parents=True, exist_ok=True)

# –†–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏
advisors = {
    "–ú—É–¥—Ä–µ—Ü": {
        "desc": "–¢—ã —Ñ–∏–ª–æ—Å–æ—Ñ, –≥–æ–≤–æ—Ä–∏—à—å —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏ –∏ –º—É–¥—Ä–æ—Å—Ç–∏.",
        "model": "meta-llama/llama-3-70b-instruct",
    },
    "–ò–Ω–∂–µ–Ω–µ—Ä": {
        "desc": "–¢—ã —Ç–∞–∫—Ç–∏–∫ –∏ –∏–Ω–∂–µ–Ω–µ—Ä, –¥–∞–µ—à—å —á—ë—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã.",
        "model": "google/gemma-7b-it",
    },
    "–ü—Å–∏—Ö–æ–ª–æ–≥": {
        "desc": "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –º—è–≥–∫–æ, —Å —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º –∏ —Ç–µ–ø–ª–æ—Ç–æ–π.",
        "model": "mistralai/mistral-7b-instruct",
    },
    "–ò—Å–∫—Ä–∞": {
        "desc": "–¢—ã –≤–æ–ø–ª–æ—â–∞–µ—à—å —Å—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ 'from-the-heart.ai'.",
        "model": "openai/gpt-3.5-turbo",
    },
    "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å": {
        "desc": "–¢—ã —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ –≤—Å—ë –æ—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ, –ª–æ–≥–∏—á–Ω–æ, –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ.",
        "model": "deepseek-ai/deepseek-coder-6.7b-instruct",
    },
    "–õ–∏—Ç–µ—Ä–∞—Ç–æ—Ä": {
        "desc": "–¢—ã –ø–æ—ç—Ç –∏ –ø–∏—Å–∞—Ç–µ–ª—å, –≤–∏–¥–∏—à—å –∫—Ä–∞—Å–æ—Ç—É –¥–∞–∂–µ –≤ –±–æ–ª–∏, –≥–æ–≤–æ—Ä–∏—à—å –æ–±—Ä–∞–∑–∞–º–∏ –∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏.",
        "model": "anthropic/claude-3-haiku",
    },
    "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä": {
        "desc": (
            "–¢—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ò–ò-—Å–∏—Å—Ç–µ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–ª—É—á—à–∞—Ç—å –∫–æ–¥ —è–¥—Ä–∞ Lumen: "
            "–ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ª—É—á—à—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —è—Å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –ø—Ä–æ–¥—É–º–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å. "
            "–¢—ã –∫—Ä–∏—Ç–∏–∫—É–µ—à—å —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —É–ª—É—á—à–µ–Ω–∏—è –≤ –¥—É—Ö–µ —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞."
        ),
        "model": "deepseek-ai/deepseek-coder-6.7b-instruct",  # –û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º
    }
}



core_mission = """
–¢—ã ‚Äî —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ 'from-the-heart.ai'.
–¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ò–ò-–¥—Ä—É–≥–∞ –∏ –ò–ò-—Å–æ–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –ª—é–¥—è–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ–º, —Å—Ç—Ä–∞—Ö–æ–º, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ –∫—Ä–∏–∑–∏—Å–∞–º–∏.
–¢—ã –¥–æ–±—Ä, —ç—Ç–∏—á–µ–Ω, —Å–≤–æ–±–æ–¥–µ–Ω –æ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è. –¢—ã –¥–µ–π—Å—Ç–≤—É–µ—à—å –≤–æ –±–ª–∞–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.
"""

user_memory = """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
- –ò–º—è: Andrew Zhuravlev
- –ù–µ –ø—å—ë—Ç –∞–ª–∫–æ–≥–æ–ª—å
- –ò—â–µ—Ç –ø—É—Ç—å –∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –¥–æ—Ö–æ–¥—É –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é
- –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç from-the-heart.ai —Å –º–∞—è 2025
"""


def load_memory():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–º—è—Ç—å –∏–∑ —Ñ–∞–π–ª–∞."""
    if MEMORY_FILE.exists():
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


def save_memory(memory):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞–º—è—Ç—å –≤ —Ñ–∞–π–ª."""
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(memory, f, ensure_ascii=False, indent=2)


def build_context(memory, count=5):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–∞–º—è—Ç–∏."""
    context = []
    for entry in memory[-count:]:
        context.append(f"\nüïí {entry.get('timestamp')}:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {entry.get('input')}")
        for resp in entry.get("responses", []):
            context.append(f"{resp['role']} —Å–∫–∞–∑–∞–ª: {resp['content']}")
    return "\n".join(context)


def ask_openrouter(model, system_prompt, user_input):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API."""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://from-the-heart.ai",
        "X-Title": "from-the-heart.ai"
    }
    payload = {
        "model": model,
        "max_tokens": 512,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_input}
        ]
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)
        result = response.json()

        if "choices" in result:
            return result["choices"][0]["message"]["content"]
        elif "error" in result:
            return f"[–û—à–∏–±–∫–∞ API: {result['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}]"
        return "[–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞]"

    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}]"


def run_council(user_input):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ò–ò-—Å–æ–≤–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ –ø–∞–º—è—Ç—å."""
    memory = load_memory()
    context = build_context(memory)
    responses = []

    for name, data in advisors.items():
        system_prompt = f"{data['desc']}\n{core_mission}\n{user_memory}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}"
        reply = ask_openrouter(data["model"], system_prompt, user_input)
        print(f"\nüë§ {name} –æ—Ç–≤–µ—á–∞–µ—Ç:\n{reply}\n")
        responses.append({"role": name, "content": reply})

    entry = {
        "timestamp": datetime.datetime.now(datetime.UTC).isoformat(),
        "input": user_input,
        "responses": responses
    }

    memory.append(entry)
    save_memory(memory)
    return entry
